#!/bin/bash

. ./libcgi

getcmdargs_() { shift 1; echo $@; }

screen_=''

addtag_()
{
	local n=0

	while [ $n -lt $maxtags_ ]; do
		if [ ! -d $home_/$screen_/tags/$n ]; then
			trace_ "add $home_/$screen_/tags/$n"
			mkdir $home_/$screen_/tags/$n
			echo -n "$n" > $home_/$screen_/tags/$n/.name
			break
		fi
		n=$((n + 1))
	done
}

modtags_()
{
	local i=0
	local changed=0

	shift 1
	screen_=$(getval_ '=' $1)
	shift 1
	for arg in $@; do
		cmdvar=$(getvar_ '.' $arg)
		cmdval=$(getval_ '.' $arg)
		var=$(getvar_ '=' $arg)
		val=$(getval_ '=' $arg)
		trace_ "arg $arg"
		trace_ "cmdvar: $cmdvar, cmdval: $cmdval, var: $var, val: $val"
		if [ -n "$cmdvar" -a -n "$cmdval" ]; then
			trace_ "delete $home_/$screen_/tags/$cmdvar"
			rm -vfr $home_/$screen_/tags/$cmdvar 1>&2
			changed=1
		elif [ -n "$var" -a "$var" = "tag" -a -n "$val" -a "$val" = "new" ]; then
			addtag_
			changed=1
		elif [ -n "$val" ]; then
			trace_ "$val --> $home_/$screen_/tags/$var/.name"
			echo -n "$val" > $home_/$screen_/tags/$var/.name
			changed=1
		fi
	done
	if [ $changed -eq 1 ]; then
		xsetroot -name "refresh-panel $screen_"
	fi
}

## main()

if [ $# -ne 1 ]; then
	exit 1
fi

trace_ "uuid: $1"

echo OK # handshake response
read data # receive payload

trace_ "data: $data"

mkdir -p files
if [ $? -ne 0 ]; then
	trace_ "files: failed to create directory"
	exit 1
fi

if [ "$data" = "/" ]; then
	. $base_/home > files/index.html
	echo "files/index.html"
	exit 0
fi

dir_=cache/$1
mkdir -p $dir_
if [ $? -ne 0 ]; then
	trace_ "$dir_: failed to create directory"
	exit 1
fi

case "$data" in
/cgi?home)
	. $base_/home > files/index.html
	echo "files/index.html"
	;;
/cgi?apps)
	. $base_/apps > $dir_/apps.html
	echo "$dir_/apps.html"
	;;
/cgi?wincfg)
	. $base_/wincfg > $dir_/wins.html
	echo "$dir_/wins.html"
	;;
/cgi?show=*)
	win=$(getval_ '=' $data)
	if [ -n "$win" ]; then
		xdotool windowraise $win
		xdotool windowfocus $win
	fi
	. $base_/wincfg > $dir_/wins.html
	echo "$dir_/wins.html"
	;;
/cgi?close=*)
	win=$(getval_ '=' $data)
	if [ -n "$win" ]; then
		xdotool windowkill $win
		for i in $(seq 1 5000); do
			if ! xwininfo -id $win; then
				break
			fi
		done
	fi
	. $base_/wincfg > $dir_/wins.html
	echo "$dir_/wins.html"
	;;
/cgi?pidinfo=*)
	pid=$(getval_ '=' $data)
	top -H -b -n 1 -p $pid > $dir_/pid.txt
	echo >> $dir_/pid.txt
	ls -l /proc/$pid/fd >> $dir_/pid.txt 2>&1
	echo "$dir_/pid.txt"
	;;
/cgi?wininfo=*)
	win=$(getval_ '=' $data)
	xprop -id $win > $dir_/win.txt
	echo "$dir_/win.txt"
	;;
/cgi?cache=*)
	src=$(getval_ '=' $data)
	trace_ $src
	echo "$src"
	;;
/cgi?tagcfg)
	. $base_/tagcfg > $dir_/tagcfg.html
	echo "$dir_/tagcfg.html"
	;;
/cgi?netstat=*)
	shift 1
	info=$(getval_ '=' $data)
	. $base_/netstat $info > $dir_/pidinfo.txt
	echo $dir_/pidinfo.txt
	;;
/cgi?netstat)
	shift 1
	. $base_/netstat > $dir_/netstat.html
	echo "$dir_/netstat.html"
	;;
/cgi?netcfg)
	. $base_/netcfg > $dir_/netcfg.html
	echo "$dir_/netcfg.html"
	;;
/cgi?cmd=netcfg*)
	data=$(getval_ '&' $data)
	dev=$(index_ ' ' 1 $data)
	dev=$(getval_ '=' $dev)
	type=$(index_ ' ' 2 $data)
	type=$(getval_ '=' $type)
	trace_ "DEV: $dev TYPE: $type"
	if [ -n "$type" -a $type -eq 2 ]; then
		. $base_/netcfg "$type" "$dev" > $dir_/netcfg.html
	elif [ -n "$type" -a $type -eq 1 ]; then
		fixme="wired network setup"
	fi
	echo $dir_/netcfg.html
	;;
'post.wpa'*=*)
	args=$(getval_ '&' $data) # strip post.wpa
	echo $dir_/error.html
	;;
'post.run.'*=*)
	data=$(getval_ '.' $data) # strip post
	data=$(getval_ '.' $data) # strip run
	cmd=$(getvar_ '=' $data)
	arg=$(getval_ '=' $data)
	trace_ "exec: $arg $cmd"
	# FIXME: command should be in white-list
	if [ -n "$arg" -a "$arg" == "term" ]; then
		exec xterm -e "$cmd" >/dev/null &
	else
		exec $cmd >/dev/null &
	fi
	sleep 1
	. $base_/wincfg > $dir_/wins.html
	echo "$dir_/wins.html"
	;;
/cgi?cmd=tagcfg*)
	args=$(IFS='?'; getcmdargs_ $data)
	trace_ "tagcfg cmd args: $args"
	ifs=$IFS; IFS='&'; modtags_ $args; IFS=$ifs
	. $base_/tagcfg > $dir_/tagcfg.html
	echo "$dir_/tagcfg.html"
	;;
*) trace_ "bad request '$data'"; exit 1;;
esac
